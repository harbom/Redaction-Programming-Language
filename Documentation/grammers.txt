//general program structure

<statementlist> ::= <statement>
                | <statementlist> <statement>                //1 statement or many statements

<statement> ::= <assignment>
            | <update>
            | <method>

<method> ::= <methodheading> <methodbody>

<methodheading> ::= 'func' <identifier> '(' ')'

<methodbody> ::= '{' <statementlist> '}'

<methodcall> ::= <identifier> '(' <argumentlist>? ')'                                   //put params here later but not for now

<assignment> ::= 'let' <identifier> '=' <term> ';'

<update> ::= <identifier> '=' <term> ';'

<if> ::= 'if' '(' <boolexpression> ')' '{' <statementlist> '}'

<loop> ::= 'loop' <identifier> 'from' <int literal> to <int literal>

<boolexpression> ::= <term> <conditional operator> <term>



//literals and operators and stuff like that
<literal> ::= <int literal>
            | <string literal>
            | <boolean literal>
            | 'null'

<boolean literal> ::= 'true' | 'false'

<conditional operator> ::= '!'| '<' | '>' | '<=' | '>=' | '==' | 'and' | 'or'

<term> ::= <literal> | <identifier> | '(' <numexpression> ')'



//parsing numerical expressions
<numexpression> ::= <equality>

<equality> ::= <comparison> ( ( "!=" | "==" ) <comparison> )*

<comparison> ::= <addition> ( ( ">" | ">=" | "<" | "<=" ) <addition> )*

<addition> ::= <multiplication> ( ( "-" | "+" ) <multiplication> )*

<multiplication> ::= <unary> ( ( "/" | "*" ) <unary> )*

<unary> ::= ( "!" | "-" ) <unary>
        | <primary>

<primary> ::= NUM_LITERAL
            | STRING_LITERAL
            | <boolean literal>
            | "(" <expression> ")"